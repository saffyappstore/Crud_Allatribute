
@model ViewModelLayer.ProfileViewModel
@{
    ViewBag.Title = "Register";
}

<h2>Register</h2>


<link href="~/UserProfile.css" rel="stylesheet" />
@using (Html.BeginForm("UserProfile", "Home", FormMethod.Post, new { @class = "form-horizontal",enctype="multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-4">
            <div class="user-profile-image">
                <input type="file" class="hidden " id="inputUploadFile" accept="image/*" name="UserImageFile" />
                @if (Model.ImagePath != null)
                {
                    <img src="@Url.Content(Model.ImagePath)" class="img-responsive" id="UploadImage" />
                }
                else
                {
                    <img src="/no-image-available-icon.jpg" class="img-responsive" id="UploadImage" />
                }
                <div class="upload-photo">

                    <img src="~/istockphoto-898870086-612x612.jpg" class="img-responsive" />
                </div>
                <div class="removePhoto">
                    <span class="glyphicon-piggy-bank">Remove</span>
                </div>


            </div>

        </div>
        <div class="col-md-8">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Userid)
            @Html.HiddenFor(model => model.ImagePath)

            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(model => model.Gender, "Male", new { @name = "gender" })
                        Male

                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(model => model.Gender, "Female", new { @name = "gender" })
                        Female

                    </label>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    Intrest
                </label>
                <div class="col-md-10">
                    @*@Html.DropDownListFor(model => model.Cityid, Model.Cities as SelectList, "Select City", new { @class = "form-control" })*@
                    @Html.DropDownListFor(model => model.Cityid, new SelectList(Model.Cities,"cityid","cityname"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Cityid, "", new { @class = "text-danger" })


                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    Multi Select
                </label>
                <div class="col-md-10">
                    @Html.ListBoxFor(model => model.Cityids, new MultiSelectList(Model.Cities, "Cityid", "Cityname"), new { @class = "form-control multiselect", multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.Cityids, "", new { @class = "text-danger required" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    Country
                </label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SelectedCountry,new SelectList(Model.Countries,"id","name"),"Select Country", new { @class = "form-control",@onchange="GetState(this)" })
                    @*@Html.ValidationMessageFor(model => model.SelectedCountry, "", new { @class = "text-danger required" })*@
                    @*@Html.ListBoxFor(model => model.cityids, new MultiSelectList(Model.Cities,"cityid","cityname"),new { @class = "form-control",@id="multiselect" })*@
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    States
                </label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SelectedState, new SelectList(Model.States,"id","name"), new { @class = "form-control",id="stateddl" })
                    @*@Html.ValidationMessageFor(model => model.SelectedState, "", new { @class = "text-danger required" })*@
                    @*@Html.ListBoxFor(model => model.cityids, new MultiSelectList(Model.Cities,"cityid","cityname"),new { @class = "form-control",@id="multiselect" })*@
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">
                    Intrest
                </label>
                <div class="col-md-10">
                    <label class="checkbox-inline">

                        @Html.CheckBoxFor(model => model.IsCsharp)
                        C#
                    </label>
                    <label class="checkbox-inline">

                        @Html.CheckBoxFor(model => model.IsJava)
                        Java
                    </label>
                    <label class="checkbox-inline">

                        @Html.CheckBoxFor(model => model.IsPaython)
                        Paython
                    </label>
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>

        </div>
    </div>


}

<div>
    @Html.ActionLink("Back to List", "List")
</div>
<script>
    $(function () {
        $('.datetimepicker').datetimepicker({
            format: 'DD/MM/YYYY',
        });


    });

    function GetState(element) {
        let CountryId = $(element).val();

        if (CountryId > 0 && CountryId != "") {
            $("#stateddl").empty();
           jQuery.ajax({
            url: '@Url.Action("GetStateById", "Home")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ CountryId: CountryId }),
               success: function (result) {
                   $.each(result.state, function (i, s) {
                       $("#stateddl").append('<option value=' + s.id + '>' + s.name + '</option>');
                 
                   });
                   
               }
        });  
        }
        else {
              $("#stateddl").empty();
              $("#stateddl").append('<option value="">Select State</option>');
        }

    }

</script>
