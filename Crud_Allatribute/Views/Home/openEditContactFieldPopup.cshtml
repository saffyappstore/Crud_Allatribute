
@model  ViewModelLayer.backlogCommonFormElementsDTO
   @using Enums;
    


    @using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "Post", LoadingElementId = "myLoadingElement" }, new { @id = "AddEditFormElement" }))
    {



            <div class="modal-header">
                @if (Model.elementId > 0)
                {
                    <h4 class="modal-title" id="">@Model.FieldName</h4>
                }
                else
                {
                    <h4 class="modal-title" id="">@ViewBag.Name</h4>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="hidden" value="@Model.elementId" id="hdnElementID" />
                <input type="hidden" value="@Model.BacklogType" id="hdnBacklogType" />
                <input type="hidden" value="@Model.attrType" id="hdnattrType" />
                @*<input type="hidden" value="@Model.ifOptionExist.ToString()" id="hdnifOptionExist" />*@
                <input type="hidden" value="@Model.ListType" id="hdnListType" />
                <div class="row">
                    <div class="col-md-12  form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.FieldName, htmlAttributes: new { @class = "control-label requiredfield" })
                        </div>
                        <div class="col-md-8">
                            <div class="input-icon">
                                @Html.TextBoxFor(model => model.FieldName, new { @class = "form-control checkisexist", @placeholder = "Field Name", @autocomplete = "off", title = "Max 255 characters", maxlength = "255" })
                                @Html.ValidationMessageFor(model => model.FieldName, "", new { @class = "text-danger" })
                                <span class="glyphicon glyphicon-warning-sign form-control-feedback "></span>
                                <span class="glyphicon glyphicon-ok form-control-feedback "></span>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-12  form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.FieldLabel, htmlAttributes: new { @class = "control-label requiredfield" })
                        </div>
                        <div class="col-md-8">
                            <div class="input-icon">
                                @Html.TextBoxFor(model => model.FieldLabel, new { @class = "form-control", @placeholder = "Field label", @autocomplete = "off", title = "Max 700 characters", maxlength = "700" })
                                @Html.ValidationMessageFor(model => model.FieldLabel, "", new { @class = "text-danger" })
                                <span class="glyphicon glyphicon-warning-sign form-control-feedback "></span>
                                <span class="glyphicon glyphicon-ok form-control-feedback "></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12  form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.Label("Field Watermark: ", htmlAttributes: new { @class = "control-label requiredfield" })
                        </div>
                        <div class="col-md-8">
                            <div class="input-icon">
                                @Html.TextBoxFor(model => model.FieldPlaceholder, new { @class = "form-control checkisexist", @placeholder = "Field Placeholder", @autocomplete = "off", title = "Max 255 characters", maxlength = "255" })
                                @Html.ValidationMessageFor(model => model.FieldPlaceholder, "", new { @class = "text-danger" })
                                <span class="glyphicon glyphicon-warning-sign form-control-feedback "></span>
                                <span class="glyphicon glyphicon-ok form-control-feedback "></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.FieldInfo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            <div class="input-icon">
                                @Html.TextAreaFor(model => model.FieldInfo, new { @class = "form-control", @placeholder = "Field Information", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.FieldInfo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Colspan, htmlAttributes: new { @class = "control-label requiredfield" })
                        </div>
                        <div class="col-md-8">
                            <div class="input-icon">
                                @Html.DropDownListFor(model => model.Colspan, new SelectList(ViewBag.FieldColspan, "Id", "Description"), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Colspan, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.IsDefault == false && (Model.attrType == (int)BacklogFormAttributesEnums.AttributeType.DropdownCustomList))
                {
                    <div class="row">
                        <div class="col-md-12 form-group ar-flex-wrap">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.DropdownType, htmlAttributes: new { @class = "control-label requiredfield" })
                            </div>
                            <div class="col-md-8">
                                <div class="input-icon">
                                    @if (ViewBag.AllowEdit == false)
                                    {
                                        @Html.DropDownListFor(model => model.DropdownType, new SelectList(ViewBag.Dropdowntypes, "Id", "Description"), "Select Dropdown Type", new { @class = "form-control", disabled = "disabled" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.DropdownType, new SelectList(ViewBag.Dropdowntypes, "Id", "Description"), "Select Dropdown Type", new { @class = "form-control" })
                                    }

                                    @Html.ValidationMessageFor(model => model.DropdownType, "", new { @class = "text-danger" })

                                </div>
                            </div>
                        </div>
                    </div>

                }

                @{var hidenClass = Model.IsRequired ? "" : "hidden";
                }
                <div class="row">
                    <div class="col-md-12 form-group ar-flex-wrap">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.IsRequired, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.CheckBoxFor(model => model.IsRequired, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IsRequired, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-12 form-group ar-flex-wrap @hidenClass" id="validationMessageControl">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.FieldErrorMessage, htmlAttributes: new { @class = "control-label requiredfield" })
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.FieldErrorMessage, new { @class = "form-control", @placeholder = "Field Error Message" })
                            @Html.ValidationMessageFor(model => model.FieldErrorMessage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div> @if ((Model.attrType == (int)BacklogFormAttributesEnums.AttributeType.DropdownCustomList))
                {

                    <div class="row">
                        <div class="col-md-12 form-group ar-flex-wrap">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Option, htmlAttributes: new { @class = "control-label requiredfield" })
                            </div>
                            <div class="col-md-8">
                                <div class="input-group">
                                    <i class="fa"></i>
                                    <div class="input-icon" style="margin-top:-19px;">
                                        @Html.TextBoxFor(model => model.Option, new { @class = "form-control", @placeholder = "Option", @autocomplete = "off", @onkeyup = "CourseTemplates.resetOptionValidation(this)", @onchange = "CourseTemplates.resetOptionValidation(this);" })
                                    </div>
                                    <span class="input-group-btn pl10 CustomOptionSavebtnDiv disableFade" onclick='CourseTemplates.AddCustomOption("Add")' id="setupOptionAddButton">
                                        <a class="btn btn-default btn-icon-only" id="btnAddDropDownOption" title="Add Option">
                                            <i class="fa fa-plus"></i>
                                        </a>
                                    </span>
                                    <span class="input-group-btn pl10 CustomOptionSavebtnDiv disableFade" onclick='CourseTemplates.AddCustomOption("Edit")' id="setupOptionEditButton" style="display:none">
                                        <a class="btn btn-default btn-icon-only" id="btnEditDropDownOption" title="Edit Option">
                                            <i class="fa fa-plus"></i>
                                        </a>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.Option, "", new { @class = "text-danger" })
                                <span id="optionsError" style="color:red; display:none;">Please Add Options</span>
                            </div>
                        </div>
                    </div>
                }

            </div>
                
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="ContactForm.AddUpdateTemplateElement()">Save changes</button>
            </div>
  


    }


